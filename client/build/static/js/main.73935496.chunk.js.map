{"version":3,"sources":["Chat.js","ChatWrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chat","socket","username","room","useState","currentMessage","setCurrentMessage","messageList","setMessageList","sendMessage","a","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","useEffect","on","data","className","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","ChatWrapper","setUsername","setRoom","showChat","setShowChat","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAgFeA,MA5Ef,YAA2C,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAAQ,EACIC,mBAAS,IADb,mBACjCC,EADiC,KACjBC,EADiB,OAEFF,mBAAS,IAFP,mBAEjCG,EAFiC,KAEpBC,EAFoB,KAIlCC,EAAW,uCAAG,4BAAAC,EAAA,yDACK,KAAnBL,EADc,uBAEVM,EAAc,CAClBR,KAAMA,EACNS,OAAQV,EACRW,QAASR,EACTS,KACE,IAAIC,KAAKA,KAAKC,OAAOC,WACrB,IACA,IAAIF,KAAKA,KAAKC,OAAOE,cATT,SAYVjB,EAAOkB,KAAK,eAAgBR,GAZlB,OAahBH,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBT,OACnCL,EAAkB,IAdF,2CAAH,qDAwBjB,OANAe,qBAAU,WACRpB,EAAOqB,GAAG,mBAAmB,SAACC,GAC5Bf,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBG,YAEpC,CAACtB,IAGF,mCACA,sBAAKuB,UAAU,cAAf,UACE,qBAAKA,UAAU,cAAf,SACE,4CAEF,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,CAAgBA,UAAU,oBAA1B,SACGjB,EAAYkB,KAAI,SAACC,GAChB,OACE,qBACEF,UAAU,UACVG,GAAIzB,IAAawB,EAAed,OAAS,MAAQ,QAFnD,SAIE,gCACE,qBAAKY,UAAU,kBAAf,SACE,4BAAIE,EAAeb,YAErB,sBAAKW,UAAU,eAAf,UACE,mBAAGG,GAAG,OAAN,SAAcD,EAAeZ,OAC7B,mBAAGa,GAAG,SAAN,SAAgBD,EAAed,wBAQ7C,sBAAKY,UAAU,cAAf,UACE,uBACEI,KAAK,OACLC,MAAOxB,EACPyB,YAAY,SACZC,SAAU,SAACC,GACT1B,EAAkB0B,EAAMC,OAAOJ,QAEjCK,WAAY,SAACF,GACG,UAAdA,EAAMG,KAAmB1B,OAG7B,wBAAQ2B,QAAS3B,EAAjB,6B,SCnEFR,E,OAASoC,EAAGC,QAAQ,KA+CXC,EA7CK,WAAO,IAAD,EACUnC,mBAAS,IADnB,mBACfF,EADe,KACLsC,EADK,OAEEpC,mBAAS,IAFX,mBAEfD,EAFe,KAETsC,EAFS,OAGUrC,oBAAS,GAHnB,mBAGfsC,EAHe,KAGLC,EAHK,KActB,OACI,8BACK,qBAAKnB,UAAU,MAAf,SACLkB,EAoBA,cAAC,EAAD,CAAMzC,OAAQA,EAAQC,SAAUA,EAAUC,KAAMA,IAnBhD,sBAAKqB,UAAU,oBAAf,UACE,6CACA,uBACEI,KAAK,OACLE,YAAY,eACZC,SAAU,SAACC,GACTQ,EAAYR,EAAMC,OAAOJ,UAG7B,uBACED,KAAK,OACLE,YAAY,cACZC,SAAU,SAACC,GACTS,EAAQT,EAAMC,OAAOJ,UAGzB,wBAAQO,QA7BG,WACE,KAAblC,GAA4B,KAATC,IACrBF,EAAOkB,KAAK,YAAahB,GACzBwC,GAAY,KA0BV,kCCzBKC,MATf,WAEE,OACC,mCACE,cAAC,EAAD,OCCUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73935496.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport './Chat.css'\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  return (\n    <>\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p> Chat Now</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? \"you\" : \"other\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n</>\n    \n  );\n}\n\nexport default Chat;\n","import React from 'react';\r\nimport \"./App.css\";\r\nimport io from \"socket.io-client\";\r\nimport { useState } from \"react\";\r\nimport Chat from \"./Chat\";\r\nconst socket = io.connect(\"/\");\r\n\r\nconst ChatWrapper = () => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [room, setRoom] = useState(\"\");\r\n    const [showChat, setShowChat] = useState(false);\r\n  \r\n    const joinRoom = () => {\r\n      if (username !== \"\" && room !== \"\") {\r\n        socket.emit(\"join_room\", room);\r\n        setShowChat(true);\r\n      }\r\n    };\r\n\r\n    \r\n  \r\n    return (\r\n        <div>\r\n             <div className=\"App\">\r\n      {!showChat ? (\r\n        <div className=\"joinChatContainer\">\r\n          <h3>Join A Chat</h3>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Your Name...\"\r\n            onChange={(event) => {\r\n              setUsername(event.target.value);\r\n            }}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Group ID...\"\r\n            onChange={(event) => {\r\n              setRoom(event.target.value);\r\n            }}\r\n          />\r\n          <button onClick={joinRoom}>Join A Group</button>\r\n        </div>\r\n      ) : (\r\n        <Chat socket={socket} username={username} room={room} />\r\n      )}\r\n      \r\n    </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatWrapper;\r\n","import \"./App.css\";\nimport Chat from \"./Chat\";\nimport ChatWrapper from \"./ChatWrapper\"\nimport Hello from \"./hello\";\n\n\n\nfunction App() {\n \n  return (\n   <>\n     <ChatWrapper/>\n   </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}